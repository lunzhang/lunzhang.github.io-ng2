"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var GridItem = (function () {
    function GridItem() {
        this.style = {};
        this.position = {};
        this.size = { 'x': 1, 'y': 1 };
    }
    GridItem.prototype.setPosition = function (newPosition) {
        this.position = newPosition;
        this.calcPosition();
    };
    GridItem.prototype.setSize = function (newSize) {
        this.size = newSize;
        this.calcSize();
    };
    GridItem.prototype.calcPosition = function () {
        var x = (this.gridConfig.colWidth + this.gridConfig.marginLeft + 2) * (this.position.col - 1) + this.gridConfig.marginLeft;
        var y = (this.gridConfig.rowHeight + this.gridConfig.marginTop + 2) * (this.position.row - 1) + this.gridConfig.marginTop;
        this.style.left = x.toString() + 'px';
        this.style.top = y.toString() + 'px';
    };
    GridItem.prototype.calcSize = function () {
        var w = (this.gridConfig.colWidth * this.size.x) + (this.gridConfig.marginLeft * (this.size.x - 1));
        var h = (this.gridConfig.rowHeight * this.size.y) + (this.gridConfig.marginTop * (this.size.y - 1));
        this.style.width = w.toString() + 'px';
        this.style.height = h.toString() + 'px';
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], GridItem.prototype, "gridConfig", void 0);
    return GridItem;
}());
exports.GridItem = GridItem;

//# sourceMappingURL=griditem.js.map
